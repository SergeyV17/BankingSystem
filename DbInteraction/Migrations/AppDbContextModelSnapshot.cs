// <auto-generated />
using System;
using DbInteraction;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbInteraction.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLibrary.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccountLockout")
                        .HasColumnType("bit");

                    b.Property<decimal>("AmountOfReplenishmentPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfLastReplenish")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("DataLibrary.Cards.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CardBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("Card_Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Card");
                });

            modelBuilder.Entity("DataLibrary.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("DataLibrary.Deposits.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfDepositClose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDepositOpen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DepositCapitalization")
                        .HasColumnType("bit");

                    b.Property<string>("DepositNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DepositRate")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("Deposit_Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Deposit");
                });

            modelBuilder.Entity("DataLibrary.Accounts.RegularAccount", b =>
                {
                    b.HasBaseType("DataLibrary.Accounts.Account");

                    b.HasDiscriminator().HasValue("RegularAccount");
                });

            modelBuilder.Entity("DataLibrary.Accounts.VIPAccount", b =>
                {
                    b.HasBaseType("DataLibrary.Accounts.Account");

                    b.HasDiscriminator().HasValue("VIPAccount");
                });

            modelBuilder.Entity("DataLibrary.Cards.VisaBlack", b =>
                {
                    b.HasBaseType("DataLibrary.Cards.Card");

                    b.HasDiscriminator().HasValue("VisaBlack");
                });

            modelBuilder.Entity("DataLibrary.Cards.VisaClassic", b =>
                {
                    b.HasBaseType("DataLibrary.Cards.Card");

                    b.HasDiscriminator().HasValue("VisaClassic");
                });

            modelBuilder.Entity("DataLibrary.Cards.VisaCorporate", b =>
                {
                    b.HasBaseType("DataLibrary.Cards.Card");

                    b.HasDiscriminator().HasValue("VisaCorporate");
                });

            modelBuilder.Entity("DataLibrary.Cards.VisaPlatinum", b =>
                {
                    b.HasBaseType("DataLibrary.Cards.Card");

                    b.HasDiscriminator().HasValue("VisaPlatinum");
                });

            modelBuilder.Entity("DataLibrary.Clients.Entity", b =>
                {
                    b.HasBaseType("DataLibrary.Clients.Client");

                    b.HasDiscriminator().HasValue("Entity");
                });

            modelBuilder.Entity("DataLibrary.Clients.Individual", b =>
                {
                    b.HasBaseType("DataLibrary.Clients.Client");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("DataLibrary.Deposits.DefaultDeposit", b =>
                {
                    b.HasBaseType("DataLibrary.Deposits.Deposit");

                    b.HasDiscriminator().HasValue("DefaultDeposit");
                });

            modelBuilder.Entity("DataLibrary.Deposits.NullDeposit", b =>
                {
                    b.HasBaseType("DataLibrary.Deposits.Deposit");

                    b.HasDiscriminator().HasValue("NullDeposit");
                });

            modelBuilder.Entity("DataLibrary.Accounts.Account", b =>
                {
                    b.HasOne("DataLibrary.Clients.Client", "Client")
                        .WithOne("Account")
                        .HasForeignKey("DataLibrary.Accounts.Account", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLibrary.Cards.Card", b =>
                {
                    b.HasOne("DataLibrary.Accounts.Account", "Account")
                        .WithOne("Card")
                        .HasForeignKey("DataLibrary.Cards.Card", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLibrary.Clients.Client", b =>
                {
                    b.OwnsOne("RequisitesLibrary.ClientRequisites.ContactData.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsOne("RequisitesLibrary.ClientRequisites.ContactData.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<int>("ContactClientId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Number")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ContactClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactClientId");
                                });
                        });

                    b.OwnsOne("RequisitesLibrary.ClientRequisites.PassportData.Passport", "Passport", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsOne("RequisitesLibrary.ClientRequisites.PassportData.FullName", "FullName", b2 =>
                                {
                                    b2.Property<int>("PassportClientId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("FirstName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LastName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MiddleName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PassportClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("PassportClientId");
                                });

                            b1.OwnsOne("RequisitesLibrary.ClientRequisites.PassportData.SeriesAndNumber", "SeriesAndNumber", b2 =>
                                {
                                    b2.Property<int>("PassportClientId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Number")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Series")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PassportClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("PassportClientId");
                                });
                        });
                });

            modelBuilder.Entity("DataLibrary.Deposits.Deposit", b =>
                {
                    b.HasOne("DataLibrary.Accounts.Account", "Account")
                        .WithOne("Deposit")
                        .HasForeignKey("DataLibrary.Deposits.Deposit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLibrary.Clients.Entity", b =>
                {
                    b.OwnsOne("RequisitesLibrary.ClientRequisites.CompanyData.Company", "Company", b1 =>
                        {
                            b1.Property<int>("EntityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EntityId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("EntityId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
